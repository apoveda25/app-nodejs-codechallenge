# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  transactionCreateOne(transactionCreateOneTransactionInput: TransactionCreateOneTransactionInput!): TransactionGraphQLType!
  transactionUpdateOne(transactionUpdateOneTransactionInput: TransactionUpdateOneTransactionInput!): TransactionGraphQLType!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

"""A string that cannot be passed as an empty value"""
scalar NonEmptyString

input PaginationInput {
  """Docs by page. Max 50 per page."""
  docsByPage: PositiveInt = 10

  """Page number. Min 1 page."""
  page: PositiveInt = 1
}

"""Floats that will have a value greater than 0."""
scalar PositiveFloat

"""Integers that will have a value greater than 0."""
scalar PositiveInt

type Query {
  transactionCountMany(transactionCountManyTransactionInput: TransactionCountManyTransactionInput = {}): Float!
  transactionFindMany(paginationInput: PaginationInput = {docsByPage: 10, page: 1}, transactionFindManyTransactionInput: TransactionFindManyTransactionInput = {}, transactionSortManyTransactionInput: TransactionSortManyTransactionInput = {}): [TransactionGraphQLType!]!
  transactionFindOne(transactionFindOneTransactionInput: TransactionFindOneTransactionInput!): TransactionGraphQLType!
  transactionStatusCountMany(transactionStatusCountManyTransactionStatusInput: TransactionStatusCountManyTransactionStatusInput = {}): Float!
  transactionStatusFindMany(paginationInput: PaginationInput = {docsByPage: 10, page: 1}, transactionStatusFindManyTransactionStatusInput: TransactionStatusFindManyTransactionStatusInput = {}, transactionStatusSortManyTransactionStatusInput: TransactionStatusSortManyTransactionStatusInput = {}): [TransactionStatusGraphQLType!]!
  transactionStatusFindOne(transactionStatusFindOneTransactionStatusInput: TransactionStatusFindOneTransactionStatusInput!): TransactionStatusGraphQLType!
  transactionTypeCountMany(transactionTypeCountManyTransactionTypeInput: TransactionTypeCountManyTransactionTypeInput = {}): Float!
  transactionTypeFindMany(paginationInput: PaginationInput = {docsByPage: 10, page: 1}, transactionTypeFindManyTransactionTypeInput: TransactionTypeFindManyTransactionTypeInput = {}, transactionTypeSortManyTransactionTypeInput: TransactionTypeSortManyTransactionTypeInput = {}): [TransactionTypeGraphQLType!]!
  transactionTypeFindOne(transactionTypeFindOneTransactionTypeInput: TransactionTypeFindOneTransactionTypeInput!): TransactionTypeGraphQLType!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringFilterInput {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: StringFilterNotModeInput
  notIn: [String!]
  startsWith: String
}

input StringFilterNotModeInput {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  notIn: [String!]
  startsWith: String
}

"""Input to count many `Transaction`"""
input TransactionCountManyTransactionInput {
  AND: [TransactionFindManyTransactionInput!]
  NOT: [TransactionFindManyTransactionInput!]
  OR: [TransactionFindManyTransactionInput!]
  accountExternalIdCredit: StringFilter
  accountExternalIdDebit: StringFilter
  createdAt: DateTimeFilter
  transactionExternalId: StringFilter
  transactionStatusId: StringFilter
  transactionTypeId: IntFilter
  value: FloatFilter
}

"""Input to create a `Transaction`"""
input TransactionCreateOneTransactionInput {
  """Example field (09647ce8-df4b-4eea-84ca-41e0dd1dfad8)"""
  accountExternalIdCredit: UUID

  """Example field (c5b6a73e-6e8f-4637-9d0b-53068757a32f)"""
  accountExternalIdDebit: UUID

  """Example field (123)"""
  tranferTypeId: PositiveInt!

  """Example field (123.45)"""
  value: PositiveFloat!
}

"""Input to find many `Transaction`"""
input TransactionFindManyTransactionInput {
  AND: [TransactionFindManyTransactionInput!]
  NOT: [TransactionFindManyTransactionInput!]
  OR: [TransactionFindManyTransactionInput!]
  accountExternalIdCredit: StringFilter
  accountExternalIdDebit: StringFilter
  createdAt: DateTimeFilter
  transactionExternalId: StringFilter
  transactionStatusId: StringFilter
  transactionTypeId: IntFilter
  value: FloatFilter
}

"""Input to find one `Transaction`"""
input TransactionFindOneTransactionInput {
  """Example field (ca0dd4bc-800d-4f88-b6f2-59dba7c6ff76)"""
  transactionExternalId: UUID!
}

"""An TransactionGraphQLType is a object that represents a transaction."""
type TransactionGraphQLType {
  """Example field (2007-12-03T10:15:30Z)"""
  createdAt: DateTimeISO!

  """Example field (10613f98-c45c-403e-af97-5d7b8d4e65aa)"""
  transactionExternalId: UUID!

  """Example field (31bb5af3-282a-447e-92e9-9557a8b9532e)"""
  transactionStatusId: UUID!
  transactionType: TransactionTypeGraphQLType!

  """Example field (123)"""
  transactionTypeId: PositiveInt!

  """Example field (123.45)"""
  value: PositiveFloat!
}

input TransactionOrderByRelationAggregateInput {
  _count: SortOrder
}

"""Input to sort many `Transaction`"""
input TransactionSortManyTransactionInput {
  accountExternalIdCredit: SortOrder
  accountExternalIdDebit: SortOrder
  createdAt: SortOrder
  transactionExternalId: SortOrder
  transactionStatusId: SortOrder
  transactionTypeId: SortOrder
  value: SortOrder
}

"""Input to count many `TransactionStatus`"""
input TransactionStatusCountManyTransactionStatusInput {
  AND: [TransactionStatusFindManyTransactionStatusInput!]
  NOT: [TransactionStatusFindManyTransactionStatusInput!]
  OR: [TransactionStatusFindManyTransactionStatusInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilterInput
}

"""Input to find many `TransactionStatus`"""
input TransactionStatusFindManyTransactionStatusInput {
  AND: [TransactionStatusFindManyTransactionStatusInput!]
  NOT: [TransactionStatusFindManyTransactionStatusInput!]
  OR: [TransactionStatusFindManyTransactionStatusInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilterInput
}

"""Input to find one `TransactionStatus`"""
input TransactionStatusFindOneTransactionStatusInput {
  """Example field (69a3739e-0060-4906-96be-5a5b2017c6ac)"""
  id: UUID!
}

"""
An TransactionStatusGraphQLType is an object that represents a transaction status.
"""
type TransactionStatusGraphQLType {
  """Example field (2007-12-03T10:15:30Z)"""
  createdAt: DateTimeISO!

  """Example field (93715516-f9df-4568-9de5-253ca5107f4f)"""
  id: UUID!

  """Example field (APPROVED)"""
  name: NonEmptyString!
  transactions(paginationInput: PaginationInput = {docsByPage: 10, page: 1}, transactionFindManyTransactionInput: TransactionFindManyTransactionInput = {}, transactionSortManyTransactionInput: TransactionSortManyTransactionInput = {}): [TransactionGraphQLType!]!
}

enum TransactionStatusName {
  APPROVED
  PENDING
  REJECTED
}

"""Input to sort many `TransactionStatus`"""
input TransactionStatusSortManyTransactionStatusInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  transactions: TransactionOrderByRelationAggregateInput
}

"""Input to count many `TransactionType`"""
input TransactionTypeCountManyTransactionTypeInput {
  AND: [TransactionTypeFindManyTransactionTypeInput!]
  NOT: [TransactionTypeFindManyTransactionTypeInput!]
  OR: [TransactionTypeFindManyTransactionTypeInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
}

"""Input to find many `TransactionType`"""
input TransactionTypeFindManyTransactionTypeInput {
  AND: [TransactionTypeFindManyTransactionTypeInput!]
  NOT: [TransactionTypeFindManyTransactionTypeInput!]
  OR: [TransactionTypeFindManyTransactionTypeInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
}

"""Input to find one `TransactionType`"""
input TransactionTypeFindOneTransactionTypeInput {
  """Example field (123)"""
  id: PositiveInt!
}

"""
An TransactionTypeGraphQLType is an object that represents a transaction type.
"""
type TransactionTypeGraphQLType {
  """Example field (2007-12-03T10:15:30Z)"""
  createdAt: DateTimeISO!

  """Example field (123)"""
  id: PositiveInt!

  """Example field (string)"""
  name: NonEmptyString!
  transactions(paginationInput: PaginationInput = {docsByPage: 10, page: 1}, transactionFindManyTransactionInput: TransactionFindManyTransactionInput = {}, transactionSortManyTransactionInput: TransactionSortManyTransactionInput = {}): [TransactionGraphQLType!]!
}

"""Input to sort many `TransactionType`"""
input TransactionTypeSortManyTransactionTypeInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  transactions: TransactionOrderByRelationAggregateInput
}

"""Input to create a `Transaction`"""
input TransactionUpdateOneTransactionInput {
  """Example field (34e0ddf8-9392-4072-ba9a-d91c611cae95)"""
  transactionExternalId: UUID

  """Example field (APPROVED)"""
  transactionStatusName: TransactionStatusName
}

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID